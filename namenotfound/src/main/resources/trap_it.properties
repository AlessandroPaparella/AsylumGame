

		hallway2.setTrap(new EventHandler() {

			@Override
			public void accept(GameDescription t) {
				// TODO Auto-generated method stub
				if(getCurrentEnemy()!=null) {
					System.out.println("Un mutante insanguinato con la faccia sfigurata si scaglia contro di te!");
				}
			}
		});
		EventHandler gasTrap = new EventHandler() {

			@Override
			public void accept(GameDescription t) {
				// TODO Auto-generated method stub
				Asylum g = (Asylum) t;
				if(g.gasVuln && !g.breathedGas) {
					g.breathedGas = true;
					g.maxMoves = 4;
					System.out.println("Stai respirando del gas tossico! Non ti rimane molto tempo prima di perdere coscienza, devi fare subito qualcosa!");
				}
			}
		};

		bathroom.setTrap(gasTrap);
		surgery.setTrap(gasTrap);

		hallway3.setTrap(new EventHandler() {
			@Override
			public void accept(GameDescription t) {
				// TODO Auto-generated method stub
				Asylum g = (Asylum) t;
				g.health = 0;
				System.out.println("GAME OVER! Una trappola mortale posizionata sulla porta ti ha fatto a pezzi!");
				Thread.currentThread().interrupt();
			}
		});

		//checkpoint
		hallway4.setTrap(new EventHandler() {

			@Override
			public void accept(GameDescription t) {
				// TODO Auto-generated method stub
				checkpoint((Asylum)t);
			}
		});

		//stanza iniziale
		setCurrentRoom(room1);
		System.out.println("Ti svegli confuso in una stanza...cerchi di ricordare cosa ti ha portato qui. Stavi indagando su qualcosa ma non riesci a ricordare...hai un forte dolore alla testa. Un odore nauseabondo e' nell'aria...");

		paddedCell.setTrap(new EventHandler() {

			@Override
			public void accept(GameDescription t) {
				// TODO Auto-generated method stub
				if (t.getCurrentRoom().hasLight() && getCurrentEnemy()!=null) {
					try {
						t.getMap().readArc(paddedCell, surveillance).setLockedBy(key_1.getId());
						t.getMap().readArc(paddedCell, surveillance).setLocked(true);
						paddedCell.setDescription("Sei nella stanza imbottita. Questa e' usata per rinchiudere i pazienti in preda a forti crisi, in modo che non danneggino se' stessi. Davanti a te vedi un essere mastodontico, e' l'assistente del direttore.");
						paddedCell.setLook("Apparentemente, puoi solo tornare indietro nella sorveglianza.");
						System.out.println("Sei in trappola! ......");
					} catch (Exception e) {}
				}
				if (t.getCurrentRoom().hasLight() && getCurrentEnemy()==null) {
					try {
					paddedCell.setDescription("Sei nella stanza imbottita. Questa e' usata per rinchiudere i pazienti in preda a forti crisi, in modo che non danneggino se' stessi.");
				}
			 catch (Exception e) {}
		}
			}
		});

		office.setTrap(new EventHandler() {

			@Override
			public void accept(GameDescription t) {
				// TODO Auto-generated method stub
				if (getCurrentEnemy()!=null) {
					try {
						System.out.println("Hai di fronte la mente dietro tutto cio', il direttore.");
					office.setLook("Puoi salire le scale che conducono all'uscita della struttura oppure puoi tornare indietro nella cella imbottita.");

				}
			 catch (Exception e) {}
		}
				if (getCurrentEnemy()==null) {

					office.setLook("Puoi salire le scale che conducono all'uscita della struttura oppure puoi tornare indietro nella cella imbottita.");
					}

			}
		});
