private void checkpoint(Asylum t) {
		try {
			db = new HandleDB();
			this.setCurrentRoom(t.getCurrentRoom());
			this.health=t.health;
			this.breathedGas=t.breathedGas;
			this.compassUsed=t.compassUsed;
			this.gasVuln=t.gasVuln;
			this.maxMoves=t.maxMoves;
			db.updateTuple(player, this);
			db.closeConnection();
			System.out.println("Partita salvata!");
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}
	}
	
private void changeRoom(CommandType c, PrintStream out) {
		if(compassUsed || c==CommandType.UP || c==CommandType.DOWN) {
			try {
				Room next = searchDirection(commandToDirection(c));
				if (next == null) {
					out.println("Non esiste nessuna stanza adiacente in quella direzione!");
				} else if(getMap().readArc(getCurrentRoom(), next).isLocked()) {
					out.println("La porta sembra esser bloccata...");
				} else {
					setCurrentRoom(next);
					setCurrentEnemy(null);
					for(AdventureCharacter a: getCurrentRoom().getEnemies()) {
						if(a instanceof Enemy && a.getHealth()>0) {
							setCurrentEnemy((Enemy)a);
							break;
						}
					}
					//gestione trappola
					if(getCurrentRoom().hasTrap()) {
						getCurrentRoom().getTrap().accept(this);
					}
					out.println(getCurrentRoom().getDescription());
				}
			} catch (Exception e) {
				out.println(e.getMessage());
			}
		}else {
			out.println("Se solo avessi una bussola...");
		}
	}
	
@Override
	public void nextMove(ParserOutput p, PrintStream out) {
		// TODO Auto-generated method stub

		if (p.getObject()==null && p.getEnemy()==null && p.getTarget()==null) {
			switch (p.getCommand().getType()) {
			case INVENTORY:
				for(Item i : getInventory().getList()) {
					out.println(i.getName());
				}
				if(getInventory().getList().isEmpty())
					out.println("Inventario vuoto!");
				break;
			case LOOK_AT:
				out.println(getCurrentRoom().getLook());
				if(!getCurrentRoom().getObjects().isEmpty()) {
					if(getCurrentRoom().hasLight()) {
						out.println("La stanza contiene anche: ");
						for(Item i : getCurrentRoom().getObjects()) {
							out.println(i.getName());
						}
					}
				}
				break;
			case NORD:
				changeRoom(p.getCommand().getType(), out);
				break;
			case NORTH_EAST:
				changeRoom(p.getCommand().getType(), out);
				break;
			case NORTH_WEST:
				changeRoom(p.getCommand().getType(), out);
				break;
			case SOUTH_EAST:
				changeRoom(p.getCommand().getType(), out);
				break;
			case SOUTH_WEST:
				changeRoom(p.getCommand().getType(), out);
				break;
			case EAST:
				changeRoom(p.getCommand().getType(), out);
				break;
			case WEST:
				changeRoom(p.getCommand().getType(), out);
				break;
			case SOUTH:
				changeRoom(p.getCommand().getType(), out);
				break;
			case UP:
				changeRoom(p.getCommand().getType(), out);
				break;
			case DOWN:
				changeRoom(p.getCommand().getType(), out);
				break;
			case WALK_TO:
				outer:
				try {
					for(Room a : getMap().getAdjacents(getCurrentRoom())) {
						if(a.getName().equals(p.getNextRoom())) {
							 if(getMap().readArc(getCurrentRoom(), a).isLocked()) {
								out.println("La porta sembra esser bloccata...");
								break outer;
							} else {
							setCurrentRoom(a);
							setCurrentEnemy(null);
							for(AdventureCharacter ad: getCurrentRoom().getEnemies()) {
								if(ad instanceof Enemy && ad.getHealth()>0) {
									setCurrentEnemy((Enemy)ad);
									break;
								}
							}
							//gestione trappola
							if(getCurrentRoom().hasTrap()) {
								getCurrentRoom().getTrap().accept(this);
							}
							if(this.health>0) {
								out.println(getCurrentRoom().getDescription());
							}
							break;
						}
					}
					}
					if(!getCurrentRoom().getName().equals(p.getNextRoom())) {
						out.println("Nessuna stanza adiacente ha questo nome!");
					}

				}catch (Exception e) {
					// TODO: handle exception
				}
				break;
			default:
				out.println(ResourceBundle.getBundle("InvalidCommandException", lang).getString("standard"));

			}
		} else if(p.getObject()!=null && p.getTarget()==null) {
			p.getObject().getHandler().apply(p.getCommand().getType()).accept(this);
		} else if(p.getEnemy()!=null && p.getTarget()==null) {
			switch (p.getCommand().getType()) {
			case TALK_TO:
				if (p.getEnemy().getHealth()>0 && p.getEnemy() instanceof Enemy) {
				out.println(p.getEnemy().getTalk());
				}
				else {
					out.println("Il nemico e' ormai deceduto, potrai parlargli con calma al cimitero...");
				}
				break;
			case BREAK:
				if(p.getEnemy().getHealth()>0 && p.getEnemy() instanceof Enemy) {
					setCurrentEnemy((Enemy)p.getEnemy());
					p.getEnemy().setHealth(p.getEnemy().getHealth()-5);
				}else {
					out.println("Non dovresti... Non sembra essere minaccioso!");
				}
				break;
			case LOOK_AT:
				out.println(p.getEnemy().getDescription());
				if(p.getEnemy().getHealth() <= 0) {
					for(Item i: p.getEnemy().getInv().getList()) {
						getCurrentRoom().getObjects().add(i);
					}
					p.getEnemy().getInv().getList().clear();
				}
				break;
			default:
				out.println(ResourceBundle.getBundle("InvalidCommandException", lang).getString("standard"));
				break;
			}
		} else if(p.getObject()!=null && p.getTarget()!=null) {
			switch (p.getCommand().getType()) {
			case DROP:
				if(p.getTarget() instanceof ItemContainer) {
					p.getObject().getHandler().apply(CommandType.DROP);
					getCurrentRoom().getObjects().remove(p.getObject());
					((ItemContainer) p.getTarget()).add(p.getObject());
				}else {
					out.println(ResourceBundle.getBundle("InvalidCommandException", lang).getString("standard"));
				}
				break;
			case BREAK:
				if(p.getTarget() instanceof Weapon) {
					p.getObject().getHandler().apply(CommandType.BREAK);
					Integer s = ((Weapon) p.getTarget()).getShots();
					((Weapon) p.getTarget()).setShots(s-1);
				}else {
					out.println(ResourceBundle.getBundle("InvalidCommandException", lang).getString("standard"));
				}
				break;
			default:
				out.println(ResourceBundle.getBundle("InvalidCommandException", lang).getString("standard"));
				break;
			}
		}

		//gestione del gas
		if(this.breathedGas) {
			switch(maxMoves) {
				case 4:
					out.println("Il gas inizia ad entrare in circolo nell'organismo");
					break;
				case 3:
					out.println("Il gas sta iniziando a fare il suo effetto, sintomi indolenzimento e debolezza");
					break;
				case 2:
					out.println("Il gas sta iniziando a offuscarti le idee e non riesci piu' a ragionare, devi fare in fretta");
					break;
				case 1:
					out.println("La vista si offusca, la tua fine e'vicina ");
					break;
				case 0:
					out.println("Sei morto per asfissia");
					System.exit(0);
					break;
				}
				maxMoves--;
			}

		if(getCurrentEnemy()!=null && getCurrentEnemy().getHealth()>0 && getCurrentRoom().hasLight()) {
			health = health - getCurrentEnemy().getDamage();
			if(health<0) health=0;
			out.println(getCurrentEnemy().getName()+" ti ha attaccato! Salute: "+ health);
			out.println(getCurrentEnemy().getName()+" ha salute: "+getCurrentEnemy().getHealth());
		}
		if(getCurrentEnemy()!=null && getCurrentEnemy().getHealth()<=0) {
			out.println("Hai ucciso "+getCurrentEnemy().getName()+"!");
			if(getCurrentEnemy().getDroppable()!=null) {
				getCurrentRoom().getObjects().add(getCurrentEnemy().getDroppable());
				out.println(getCurrentEnemy().getName()+" ha rilasciato "+getCurrentEnemy().getDroppable().getName());
				getCurrentEnemy().setDroppable(null);
			}
			setCurrentEnemy(null);
		}

		if(health==0) {
			out.println("Sei morto! GAME OVER!");
			Thread.currentThread().interrupt();
			return;
		}

	}