
		final Item item_1 = new Item("bed", "A bed in which patients sleep.", null);
		bed.setHandler(new CommandHandler() {

			@Override
			public EventHandler apply(CommandType t) {
				// TODO Auto-generated method stub
				switch (t) {
				case LOOK_AT:
					return new EventHandler() {
						@Override
						public void accept(GameDescription t) {
							// TODO Auto-generated method stub
							System.out.println(bed.getDescription());
						}
					};
				default:
					return invalidCommand;
				}
			}
		});

		final Weapon item_2 = new Weapon("screwdriver", "A screwdriver that might come in handy.", null, 10, 5, 15);
		screwdriver.setHandler(new CommandHandler() {
			@Override
			public EventHandler apply(CommandType t) {
				// TODO Auto-generated method stub
				switch (t) {
				case LOOK_AT:
					return new EventHandler() {
						@Override
						public void accept(GameDescription t) {
							// TODO Auto-generated method stub
							System.out.println(screwdriver.getDescription());
						}
					};
				case USE:
					return new EventHandler() {
						@Override
						public void accept(GameDescription t) {
							// TODO Auto-generated method stub
							if(t.getCurrentEnemy()!=null && t.getCurrentRoom().hasLight()) {
								if(screwdriver.getShots() != 0) {
									t.getCurrentEnemy().setHealth(t.getCurrentEnemy().getHealth()-screwdriver.getDamage());
									screwdriver.setShots(screwdriver.getShots() - 1);
									switch(screwdriver.getShots()) {
									case 0:
										System.out.println("It's gone, now it's unusable");
										break;
									case 1:
										System.out.println("The screwdriver is almost totally destroyed");
										break;
									case 4:
										System.out.println("You have a couple more hits left before it breaks");
										break;
									case 7:
										System.out.println("The screwdriver is starting to get damaged");
										break;
									}
								} else System.out.println("The screwdriver is now destroyed, it wouldn't do any damage");
							} else System.out.println("There doesn't seem to be anyone to hit!");
						}
					};
				case DROP:
					return new EventHandler() {
						@Override
						public void accept(GameDescription t) {
							// TODO Auto-generated method stub
							EventHandler.drop(screwdriver, t);
							System.out.println("You left the screwdriver!");
						}
					};
				case PICK_UP:
					return new EventHandler() {
						@Override
						public void accept(GameDescription t) {
							// TODO Auto-generated method stub
							try {
								EventHandler.pickUp(screwdriver, t);
								System.out.println("You picked the screwdriver!");
							} catch (InvalidCommandException e) {
								// TODO Auto-generated catch block
								System.out.println("Object not present in the room");
							}
						}
					};
				default:
					return invalidCommand;
				}
			}
		});

		final Item item_3 = new Item("gas-mask", "A mask to protect you from toxic gases.", null);
		gasmask.setHandler(new CommandHandler() {
			@Override
			public EventHandler apply(CommandType t) {
				switch(t) {
				case LOOK_AT:
					return new EventHandler() {
						@Override
						public void accept(GameDescription t) {
							// TODO Auto-generated method stub
							System.out.println(gasmask.getDescription());
						}
					};
				case USE:
					return new EventHandler() {
						@Override
						public void accept(GameDescription t) {
							// TODO Auto-generated method stub
							System.out.println("You are wearing the mask correctly!");
							((Asylum) t).gasVuln = false;
							bathroom.setDescription("As soon as you enter the room, toxic gases start circulating in the air, but the mask protects you. You are in the bathroom.");
					     	surgery.setDescription("As soon as you enter the room, toxic gases start circulating in the air, but the mask protects you. You are in the room where the patients are undergoing the operations. Who knows at this point what operations it is ...");
					     	if(!compassUsed) {
					     		bathroom.setLook("You could use the toilet to ... no, better to avoid. You can only go back to the hallway 3.");
							 	surgery.setLook("You can only go back to the hallway 4.");

					     	}
					     	else {
					     		bathroom.setLook("You could use the toilet to ... no, better to avoid. You can only go back south to the hallway 3.");
							 	surgery.setLook("You can only go back west to the hallway 4.");
						}
						}
					};
				case PICK_UP:
					return new EventHandler() {
						@Override
						public void accept(GameDescription t) {
							// TODO Auto-generated method stub
							try {
								EventHandler.pickUp(gasmask, t);
								System.out.println("You picked the gas-mask!");
							} catch (InvalidCommandException e) {
								// TODO Auto-generated catch block
								System.out.println("Object not present in the room");
							}
						}
					};
				case DROP:
					return new EventHandler() {
						@Override
						public void accept(GameDescription t) {
							// TODO Auto-generated method stub
							EventHandler.drop(gasmask, t);
							((Asylum) t).gasVuln = true;
							System.out.println("You have left the gas-mask!");
							bathroom.setDescription("");
					        surgery.setDescription("");
							if(compassUsed) {
								bathroom.setLook("The effect of the gas stuns you and does not allow you to see anything. You can only go back south to the hallway 3.");
						        surgery.setLook("The effect of the gas stuns you and does not allow you to see anything. You can only go back west to the hallway 4.");
						        }
							else {
								bathroom.setLook("The effect of the gas stuns you and does not allow you to see anything. You can only go back to the hallway 3.");
						        surgery.setLook("The effect of the gas stuns you and does not allow you to see anything. You can only go back to the hallway 4.");
						}
						}
					};
				default:
					return invalidCommand;
				}
			}
		});

		final Item item_4 = new Item("torch", "A useful torch to illuminate dark spaces.", null);
		torch.setHandler(new CommandHandler() {
			@Override
			public EventHandler apply(CommandType t) {
				// TODO Auto-generated method stub
				switch (t) {
				case USE:
				case TURN_ON:
					return new EventHandler() {
						@Override
						public void accept(GameDescription t) {
							// TODO Auto-generated method stub
							System.out.println("You turned on the torch!");
							t.getCurrentRoom().setLight(true);
							if (t.getCurrentRoom().equals(paddedCell) && t.getCurrentRoom().getTrap()!= null) {
								t.getCurrentRoom().getTrap().accept(t);
							}
						}
					};
				case TURN_OFF:
					return new EventHandler() {
						@Override
						public void accept(GameDescription t) {
							// TODO Auto-generated method stub
							t.getCurrentRoom().setVisible(t.getCurrentRoom().hasLight());
							System.out.println("You turned off the torch!");
						}
					};
				case LOOK_AT:
					return new EventHandler() {
						@Override
						public void accept(GameDescription t) {
							// TODO Auto-generated method stub
							System.out.println(torch.getDescription());
						}
					};
				case DROP:
					return new EventHandler() {
						@Override
						public void accept(GameDescription t) {
							// TODO Auto-generated method stub
							EventHandler.drop(torch, t);
							System.out.println("You left the torch!");
						}
					};
				case PICK_UP:
					return new EventHandler() {
						@Override
						public void accept(GameDescription t) {
							// TODO Auto-generated method stub
							try {
								EventHandler.pickUp(torch, t);
								System.out.println("You picked the torch!");
							} catch (InvalidCommandException e) {
								// TODO Auto-generated catch block
								System.out.println("Object not present in the room");
							}
						}
					};
				default:
					return invalidCommand;
				}
			}
		});

		final Item item_5 = new Item("pills", "Pills that temporarily make you immune to toxic gases.", null);
		pills.setHandler(new CommandHandler() {
			@Override
			public EventHandler apply(CommandType t) {
				// TODO Auto-generated method stub
				switch (t) {
				case USE:
					return new EventHandler() {
						@Override
						public void accept(GameDescription t) {
							// TODO Auto-generated method stub
							if(t.getInventory().getList().contains(pills)) {
								System.out.println("The effect of the pills makes you temporarily immune to toxic gases!");
								((Asylum) t).breathedGas = false;
								t.getInventory().remove(pills);
							} else System.out.println("The item is not present in the inventory!");
						}
					};
				case LOOK_AT:
					return new EventHandler() {
						@Override
						public void accept(GameDescription t) {
							// TODO Auto-generated method stub
							System.out.println(pills.getDescription());
						}
					};
				case DROP:
					return new EventHandler() {
						@Override
						public void accept(GameDescription t) {
							// TODO Auto-generated method stub
							EventHandler.drop(pills, t);
							System.out.println("You left the pills!");
						}
					};
				case PICK_UP:
					return new EventHandler() {
						@Override
						public void accept(GameDescription t) {
							// TODO Auto-generated method stub
							try {
								EventHandler.pickUp(pills, t);
								System.out.println("You picked the pills!");
							} catch (InvalidCommandException e) {
								// TODO Auto-generated catch block
								System.out.println("Object not present in the room");
							}
						}
					};
				default:
					return invalidCommand;
				}
			}
		});

		final Item item_6 = new Item("adrenaline", "Adrenaline syringes that boost your health.", null);
		adrenaline.setHandler(new CommandHandler() {
			@Override
			public EventHandler apply(CommandType t) {
				// TODO Auto-generated method stub
				switch (t) {
				case USE:
					return new EventHandler() {
						@Override
						public void accept(GameDescription t) {
							// TODO Auto-generated method stub
							if(t.getInventory().getList().contains(adrenaline)) {
								System.out.println("The effect of adrenaline boosts your health:");
								((Asylum) t).health += 20;
								System.out.println("+20 health");
								t.getInventory().remove(adrenaline);
							} else System.out.println("The item is not present in the inventory!");
						}
					};
				case LOOK_AT:
					return new EventHandler() {
						@Override
						public void accept(GameDescription t) {
							// TODO Auto-generated method stub
							System.out.println(adrenaline.getDescription());
						}
					};
				case DROP:
					return new EventHandler() {
						@Override
						public void accept(GameDescription t) {
							// TODO Auto-generated method stub
							EventHandler.drop(adrenaline, t);
							System.out.println("You left the adrenaline!");
						}
					};
				case PICK_UP:
					return new EventHandler() {
						@Override
						public void accept(GameDescription t) {
							// TODO Auto-generated method stub
							try {
								EventHandler.pickUp(adrenaline, t);
								System.out.println("You picked the adrenaline!");
							} catch (InvalidCommandException e) {
								// TODO Auto-generated catch block
								System.out.println("Object not present in the room");
							}
						}
					};
				default:
					return invalidCommand;
				}
			}
		});

		final Item item_7 = new Item("mirror", "A mirror in which your image is reflected. Mmm, you're not that bad.", null);
		mirrorBathroom.setHandler(new CommandHandler() {
			@Override
			public EventHandler apply(CommandType t) {
				// TODO Auto-generated method stub
				switch (t) {
				case LOOK_AT:
					return new EventHandler() {
						@Override
						public void accept(GameDescription t) {
							// TODO Auto-generated method stub
							System.out.println(mirrorBathroom.getDescription());
						}
					};
				case BREAK:
					return new EventHandler() {
						@Override
						public void accept(GameDescription t) {
							// TODO Auto-generated method stub
							if(!mirrorBathroom.isPushed()) {
								t.getCurrentRoom().getObjects().add(pills);
								mirrorBathroom.setPushed(true);
								System.out.println("You broke the mirror!");
							}
						}
					};
				default:
					return invalidCommand;
				}
			}
		});

		final Item item_8 = new Item("compass", "A useful compass for better orientation on the map.", null);
		compass.setHandler(new CommandHandler() {
			@Override
			public EventHandler apply(CommandType t) {
				// TODO Auto-generated method stub
				switch (t) {
				case LOOK_AT:
					return new EventHandler() {
						@Override
						public void accept(GameDescription t) {
							// TODO Auto-generated method stub
							System.out.println(compass.getDescription());
						}
					};
				case USE:
					return new EventHandler() {
						@Override
						public void accept(GameDescription t) {
							System.out.println("Grazie all'utilizzo della bussola ora sai in che direzione sono le porte e ti e' possibile spostarti utilizzando i punti cardinali come comandi!");
							room1.setLook ("You see a south door leading to the hallway 1.");
							room2.setLook ("You can only go back south to the hallway 1.");
							room3.setLook ("You don't see any other doors. You can only go back south to hallway 2.");
							room4.setLook ("You can only go back south to the hallway 2.");
							room5.setLook ("You can only go back north to the hallway 1.");
							room6.setLook ("Perhaps some patients were hoping that it would be enough to make a few holes to create an escape route ... You can only go back north to the hallway 1.");
							room7.setLook ("You can only go back north to the hallway 2.");
							room8.setLook ("You don't see any other doors, you can only go back north to the hallway 2.");
							hallway.setLook ("You can continue east to the hallway 2 or enter dormitory 1 to the northwest, 2 to the northeast, 5 to the southwest, or 6 to the southeast.");
							hallway2.setLook ("The blood is everywhere. You can go back west to the hallway 1, continue east to the hallway 3, enter the laundry room to the northwest or enter dormitory 4 to the northeast, 7 to the southwest , 8 to the southeast.");
							hallway3.setLook ("You see skeletons everywhere. You can go back west to the hallway 2, enter the bathroom to the north, or take the stairs to go downstairs");
							if (((Asylum) t).gasVuln == true) {
								bathroom.setLook("The effect of the gas stuns you and does not allow you to see anything. You can only go back south to the hallway 3.");
									}
							else {
								bathroom.setLook("You could use the toilet to ... no, better to avoid. You can only go back south to the hallway 3.");
									}
							hallway4.setLook("You can go back north to the upper floor or access the infirmary to the north-east, the surgery to the south-east and the surveillance to the west.");
							infirmary.setLook("You can only go back west to the hallway 4.");
							surgery.setLook("You can only go back west to the hallway 4.");
							surveillance.setLook("You can go back east to the hallway 4 or continue south to the padded cell.");
							paddedCell.setLook("Apparently, you can only go back north to the surveillance.");
							office.setLook("You see stairs to the south leading outside the facility, but the passage is blocked by the director. You can go back north to the padded cell.");
							((Asylum) t).compassUsed = true;

						}
					};
				case DROP:
					return new EventHandler() {
						@Override
						public void accept(GameDescription t) {
							// TODO Auto-generated method stub
							EventHandler.drop(compass, t);
							System.out.println("You left the compass!");
							((Asylum) t).compassUsed = false;
						}
					};
				case PICK_UP:
					return new EventHandler() {
						@Override
						public void accept(GameDescription t) {
							// TODO Auto-generated method stub
							try {
								EventHandler.pickUp(compass, t);
								System.out.println("You took the compass!");
							} catch (InvalidCommandException e) {
								// TODO Auto-generated catch block
								System.out.println("Object not present in the room");
							}
						}
					};
				default:
					return invalidCommand;
				}
			}
		});

		final ItemContainer item_9 = new ItemContainer("chest", "A chest that might contain something inside.", null);
		chest.setHandler(new CommandHandler() {
			@Override
			public EventHandler apply(CommandType t) {
				// TODO Auto-generated method stub
				switch (t) {
				case LOOK_AT:
					return new EventHandler() {
						@Override
						public void accept(GameDescription t) {
							// TODO Auto-generated method stub
							if(!chest.isOpened()) {
								System.out.println(chest.getDescription());
							}else {
								System.out.println("This chest contains: ");
								for(Item i: chest.getContent()) {
									System.out.println(i.getName());
								}
								for(Item i: chest.getContent()) {
									if(!t.getCurrentRoom().getObjects().contains(i)) t.getCurrentRoom().getObjects().add(i);
								}
							}
						}
					};
				case OPEN:
					return new EventHandler() {
						@Override
						public void accept(GameDescription t) {
							// TODO Auto-generated method stub
							if(chest.isOpened()) {
								System.out.println("Chest already open");
							}else if(!chest.isOpened() && !chest.isLocked()) {
									System.out.println("You opened the chest!");
									chest.setOpened(true);
								  }else if(chest.isLocked()) {
									System.out.println("It's locked! You probably need a key ...");
								  }
						}
					};
				case CLOSE:
					return new EventHandler() {
						@Override
						public void accept(GameDescription t) {
							// TODO Auto-generated method stub
								if (!chest.isOpened()) {
									System.out.println("The chest is already closed!");}
									else {
										System.out.println("You closed the chest!");
										for(Item i: chest.getContent()) t.getCurrentRoom().getObjects().remove(i);
										chest.setOpened(false);
									}
								}

					};
				default:
					return invalidCommand;
				}
			}
		});

		final Item item_10 = new Item("pc", "A computer used to interact with security systems.", null);
		pc.setHandler(new CommandHandler() {
			@Override
			public EventHandler apply(CommandType t) {
				// TODO Auto-generated method stub
				switch (t) {
				case USE:
					return new EventHandler() {
						@Override
						public void accept(GameDescription t) {
							// TODO Auto-generated method stub
							System.out.println("You turn on the PC: the videos of the patient experiments are shown. Now remember: you were investigating the disappearance of a patient inside the asylum when someone hit you in the head! The videos show that these experiments cause mutations in patients!");						}
					};
				case LOOK_AT:
					return new EventHandler() {
						@Override
						public void accept(GameDescription t) {
							// TODO Auto-generated method stub
							System.out.println(pc.getDescription());
						}
					};
				default:
					return invalidCommand;
				}
			}
		});

		final Weapon item_11 = new Weapon("scalpel", "A scalpel used in experiments.", null, 5, 10, 30);
		scalpel.setHandler(new CommandHandler() {
			@Override
			public EventHandler apply(CommandType t) {
				// TODO Auto-generated method stub
				switch (t) {
				case LOOK_AT:
					return new EventHandler() {
						@Override
						public void accept(GameDescription t) {
							// TODO Auto-generated method stub
							System.out.println(scalpel.getDescription());
						}
					};
				case USE:
					return new EventHandler() {
						@Override
						public void accept(GameDescription t) {
							// TODO Auto-generated method stub
							if(t.getCurrentEnemy()!=null && t.getCurrentRoom().hasLight()) {
								if(scalpel.getShots() != 0) {
									t.getCurrentEnemy().setHealth(t.getCurrentEnemy().getHealth()-scalpel.getDamage());
									scalpel.setShots(scalpel.getShots() - 1);
									switch(scalpel.getShots()) {
									case 0:
										System.out.println("Noo! The scalpel blade broke");
										break;
									case 1:
										System.out.println("The blade is coming off.");
										break;
									case 4:
										System.out.println("The scalpel is very fragile and get damaged very easily.");
										break;
									}
								} else System.out.println("This scalpel has lost its blade, it won't be able to help you anymore.");
							}else System.out.println("There doesn't seem to be anyone to hit!");
						}
					};
				case DROP:
					return new EventHandler() {
						@Override
						public void accept(GameDescription t) {
							// TODO Auto-generated method stub
							EventHandler.drop(scalpel, t);
							System.out.println("You left the scalpel!");
						}
					};
				case PICK_UP:
					return new EventHandler() {
						@Override
						public void accept(GameDescription t) {
							// TODO Auto-generated method stub
							try {
								EventHandler.pickUp(scalpel, t);
								System.out.println("You picked the scalpel!");
							} catch (InvalidCommandException e) {
								// TODO Auto-generated catch block
								System.out.println("Object not present in the room");
							}
						}
					};
				default:
					return invalidCommand;
				}
			}
		});


		final Weapon item_12 = new Weapon("gun", "A gun probably used against the most restless and difficult to control patients.", null, 7, 30, 70);
		gun.setHandler(new CommandHandler() {
			@Override
			public EventHandler apply(CommandType t) {
				// TODO Auto-generated method stub
				switch (t) {
				case LOOK_AT:
					return new EventHandler() {
						@Override
						public void accept(GameDescription t) {
							// TODO Auto-generated method stub
							System.out.println(gun.getDescription());
						}
					};
				case USE:
					return new EventHandler() {
						@Override
						public void accept(GameDescription t) {
							// TODO Auto-generated method stub
							if(t.getCurrentEnemy()!=null && t.getCurrentRoom().hasLight()) {
								if(gun.getShots() != 0) {
									t.getCurrentEnemy().setHealth(t.getCurrentEnemy().getHealth()-gun.getDamage());
									gun.setShots(gun.getShots() - 1);
									switch(gun.getShots()) {
									case 0:
										System.out.println("Magazine run out, ammo run out.");
										break;
									case 1:
										System.out.println("Last shot, use it well!");
										break;
									case 5:
										System.out.println("You only have one magazine so you have 5 rounds left.");
										break;
									}
								} else System.out.println("Oops ... you run out of ammo!");
							}else System.out.println("There doesn't seem to be anyone to hit!");
						}
					};
				case DROP:
					return new EventHandler() {
						@Override
						public void accept(GameDescription t) {
							// TODO Auto-generated method stub
							EventHandler.drop(gun, t);
							System.out.println("You left the gun!");
						}
					};
				case PICK_UP:
					return new EventHandler() {
						@Override
						public void accept(GameDescription t) {
							// TODO Auto-generated method stub
							try {
								EventHandler.pickUp(gun, t);
								System.out.println("You picked the gun!");
							} catch (InvalidCommandException e) {
								// TODO Auto-generated catch block
								System.out.println("Object not present in the room");
							}
						}
					};
				default:
					return invalidCommand;
				}
			}
		});

		final Item item_13 = new Item("mirror", "A mirror in which your image is reflected. Mmm, you're not that bad.", null);
		mirrorCell.setHandler(new CommandHandler() {
			@Override
			public EventHandler apply(CommandType t) {
				// TODO Auto-generated method stub
				switch (t) {
				case LOOK_AT:
					return new EventHandler() {
						@Override
						public void accept(GameDescription t) {
							// TODO Auto-generated method stub
							System.out.println(mirrorCell.getDescription());
						}
					};
				case BREAK:
					return new EventHandler() {
						@Override
						public void accept(GameDescription t) {
							// TODO Auto-generated method stub
							WeightedHashedGraph<Room, Gateway> m = t.getMap();
							if(!mirrorCell.isPushed()) {
								//inserire l'arco
								m.insArc(paddedCell, office, new Gateway(Direction.SOUTH));
								mirrorCell.setPushed(true);
								System.out.println("Breaking the mirror reveals a secret passage to the south in the director's office!");
							}
						}
					};
				default:
					return invalidCommand;
				}
			}
		});

		final Item item_14 = new Item("sheet", "The code is 5030", null);
		codePaper.setHandler(new CommandHandler() {

			@Override
			public EventHandler apply(CommandType t) {
				switch(t) {
				case LOOK_AT:
					return new EventHandler() {
						@Override
						public void accept(GameDescription t) {
							// TODO Auto-generated method stub
							System.out.println(codePaper.getDescription());
						}
					};
				case PICK_UP:
					return new EventHandler() {
						@Override
						public void accept(GameDescription t) {
							// TODO Auto-generated method stub
							try {
								EventHandler.pickUp(codePaper, t);
								System.out.println("You got the sheet!");
							} catch (InvalidCommandException e) {
								// TODO Auto-generated catch block
								System.out.println("Object not present in the room");
							}
						}
					};
				case DROP:
					return new EventHandler() {
						@Override
						public void accept(GameDescription t) {
							// TODO Auto-generated method stub
							EventHandler.drop(codePaper, t);
							System.out.println("You left the sheet!");
						}
					};
				default:
					return invalidCommand;
				}};
		});

		final Item item_15 = new Item("notepad", "A notepad that, judging by the handwriting, seems to be yours. You were apparently gathering data on this facility and clues for solving a case, but you can't quite remember. You had stressed several times \ "I HAVE TO BREAK THE MIRROR TO CONTINUE \" ...", null);
		blockNotes.setHandler(new CommandHandler() {

			@Override
			public EventHandler apply(CommandType t) {
				switch(t) {
				case LOOK_AT:
					return new EventHandler() {
						@Override
						public void accept(GameDescription t) {
							// TODO Auto-generated method stub
							System.out.println(blockNotes.getDescription());
						}
					};
				case PICK_UP:
					return new EventHandler() {
						@Override
						public void accept(GameDescription t) {
							// TODO Auto-generated method stub
							try {
								EventHandler.pickUp(blockNotes, t);
								System.out.println("You picked the notepad!");
							} catch (InvalidCommandException e) {
								// TODO Auto-generated catch block
								System.out.println("Object not present in the room");
							}
						}
					};
				case DROP:
					return new EventHandler() {
						@Override
						public void accept(GameDescription t) {
							// TODO Auto-generated method stub
							EventHandler.drop(blockNotes, t);
							System.out.println("You left the notepad!");
						}
					};
				default:
					return invalidCommand;
				}};
		});

		final Item item_16 = new Item("keypad", "A numeric keypad where you can enter a code located next to the door to the hallway 3.", null);
		keypad.setHandler(new CommandHandler() {

			@Override
			public EventHandler apply(CommandType t) {
				switch(t) {
				case LOOK_AT:
					return new EventHandler() {
						@Override
						public void accept(GameDescription t) {
							// TODO Auto-generated method stub
							System.out.println(keypad.getDescription());
						}
					};
				case USE:
					return new EventHandler() {
						@Override
						public void accept(GameDescription t) {
							// TODO Auto-generated method stub
							if (hallway3.getTrap()!=null){
								if(!keypad.isPushed()) {
									Scanner scan = new Scanner(System.in);
									System.out.println(":");
									String codEntered = scan.nextLine();
									String[] tokens = codePaper.getDescription().split("\\s+");
									if(codEntered.equals(tokens[3])) {
										hallway3.setTrap(null);
										System.out.println("Exact code! The trap has been deactivated!");
										keypad.setPushed(true);
									} else System.out.println("Wrong code!");
								} else System.out.println("Trap already deactivated!");
							}else System.out.println("Trap already deactivated!");

						}
					};
				default:
					return invalidCommand;
				}};
		});



		


		final Item item_17 = new Item("key", "A key that could come in handy for opening something.", null);
		key.setHandler(new CommandHandler() {

			@Override
			public EventHandler apply(CommandType t) {
				switch(t) {
				case LOOK_AT:
					return new EventHandler() {
						@Override
						public void accept(GameDescription t) {
							// TODO Auto-generated method stub
							System.out.println(key.getDescription());
						}
					};
				case USE:
					return new EventHandler() {
						@Override
						public void accept(GameDescription t) {
							// TODO Auto-generated method stub
							WeightedHashedGraph<Room, Gateway> m = t.getMap();
							if(t.getInventory().getList().contains(key)) {
								if(t.getCurrentRoom().equals(room1)) {
									try {
										for(Room a : m.getAdjacents(t.getCurrentRoom())) {
											if(m.readArc(t.getCurrentRoom(), a).getLockedBy()==key.getId()) {
												if (!m.readArc(t.getCurrentRoom(), a).isLocked()) System.out.println("The door is already open!");
												else {
													m.readArc(t.getCurrentRoom(), a).setLocked(false);
													System.out.println("The key seems to fit perfectly into the lock of the door leading to hallway 1!");												EventHandler.drop(key, t);
													break;
												}
											}
										}
									} catch (Exception e) {
										System.out.println(e.getMessage());
									}
								}else System.out.println("There is nothing in the room to open with this key!");
							} else System.out.println("Pick the key to use it.");
						}
					};
				case PICK_UP:
					return new EventHandler() {
						@Override
						public void accept(GameDescription t) {
							// TODO Auto-generated method stub
							try {
								EventHandler.pickUp(key, t);
								corpse.setDescription("A lifeless body with a sickly smell. It must have been there a long time.");
								System.out.println("You picked the key!");
							} catch (InvalidCommandException e) {
								// TODO Auto-generated catch block
								System.out.println("Object not present in the room");
							}

						}
					};
				case DROP:
					return new EventHandler() {
						@Override
						public void accept(GameDescription t) {
							// TODO Auto-generated method stub
							EventHandler.drop(key, t);
							System.out.println("You left the key!");
						}
					};
				default:
					return invalidCommand;
				}};
		});

#		corpseInv.add(key);


		Item item_18= new Item("key-assistant", "It looks like a door key ...", null);
		key_1.setHandler(new CommandHandler() {

			@Override
			public EventHandler apply(CommandType t) {
				switch(t) {
				case LOOK_AT:
					return new EventHandler() {
						@Override
						public void accept(GameDescription t) {
							// TODO Auto-generated method stub
							System.out.println(key_1.getDescription());
						}
					};
				case USE:
					return new EventHandler() {
						@Override
						public void accept(GameDescription t) {
							// TODO Auto-generated method stub
							WeightedHashedGraph<Room, Gateway> m = t.getMap();
							if(t.getInventory().getList().contains(key_1)) {
								if(t.getCurrentRoom().equals(paddedCell)) {
									try {
										for(Room a : m.getAdjacents(t.getCurrentRoom())) {
											if(m.readArc(t.getCurrentRoom(), a).getLockedBy()==key_1.getId()) {
												if (!m.readArc(t.getCurrentRoom(), a).isLocked()) System.out.println("The door is already open!");
												else {
													m.readArc(t.getCurrentRoom(), a).setLocked(false);
													System.out.println("The key seems to fit perfectly into the lock of the door leading to the surveillance!");
													EventHandler.drop(key_1, t);
													break;
												}
											}
										}
									} catch (Exception e) {
										System.out.println(e.getMessage());
									}
								}else System.out.println("There is nothing in the room to open with this key!");
							} else System.out.println("Pick the key to use it");
						}
					};
				case PICK_UP:
					return new EventHandler() {
						@Override
						public void accept(GameDescription t) {
							// TODO Auto-generated method stub
							try {
								EventHandler.pickUp(key_1, t);
								System.out.println("You picked the key!");
							} catch (InvalidCommandException e) {
								// TODO Auto-generated catch block
								System.out.println("Object not present in the room");
							}
						}
					};
				case DROP:
					return new EventHandler() {
						@Override
						public void accept(GameDescription t) {
							// TODO Auto-generated method stub
							EventHandler.drop(key_1, t);
							System.out.println("You left the key!");
						}
					};
				default:
					return invalidCommand;
				}};
		});

		Item item_19= new Item("key-director", "It looks like a door key ...", null);
		key_2.setHandler(new CommandHandler() {

			@Override
			public EventHandler apply(CommandType t) {
				switch(t) {
				case LOOK_AT:
					return new EventHandler() {
						@Override
						public void accept(GameDescription t) {
							// TODO Auto-generated method stub
							System.out.println(key_2.getDescription());
						}
					};
				case USE:
					return new EventHandler() {
						@Override
						public void accept(GameDescription t) {
							// TODO Auto-generated method stub
							WeightedHashedGraph<Room, Gateway> m = t.getMap();
							if(t.getInventory().getList().contains(key_2)) {
								if(t.getCurrentRoom().equals(office)) {
									try {
										for(Room a : m.getAdjacents(t.getCurrentRoom())) {
											if(m.readArc(t.getCurrentRoom(), a).getLockedBy()==key_2.getId()) {
												if (!m.readArc(t.getCurrentRoom(), a).isLocked()) System.out.println("The door is already open!");
												else {
													m.readArc(t.getCurrentRoom(), a).setLocked(false);
													System.out.println("The key seems to fit perfectly into the lock of the door leading to the exit!");
													EventHandler.drop(key_2, t);
													break;
												}
											}
										}
									} catch (Exception e) {
										System.out.println(e.getMessage());
									}
								}else System.out.println("There is nothing in the room to open with this key!");
							} else System.out.println("Pick the key to use it.");
						}
					};
				case PICK_UP:
					return new EventHandler() {
						@Override
						public void accept(GameDescription t) {
							// TODO Auto-generated method stub
							try {
								EventHandler.pickUp(key_2, t);
								System.out.println("You picked the key!");
							} catch (InvalidCommandException e) {
								// TODO Auto-generated catch block
								System.out.println("Object not present in the room");
							}
						}
					};
				case DROP:
					return new EventHandler() {
						@Override
						public void accept(GameDescription t) {
							// TODO Auto-generated method stub
							EventHandler.drop(key_2, t);
							System.out.println("You left the key!");
						}
					};
				default:
					return invalidCommand;
				}};
		});
